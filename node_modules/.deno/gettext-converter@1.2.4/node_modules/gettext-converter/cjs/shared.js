"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HEADERS = void 0;
exports.compareMsgid = compareMsgid;
exports.foldLine = foldLine;
exports.formatCharset = void 0;
exports.generateHeader = generateHeader;
var HEADERS = exports.HEADERS = new Map([['project-id-version', 'Project-Id-Version'], ['report-msgid-bugs-to', 'Report-Msgid-Bugs-To'], ['pot-creation-date', 'POT-Creation-Date'], ['po-revision-date', 'PO-Revision-Date'], ['last-translator', 'Last-Translator'], ['language-team', 'Language-Team'], ['language', 'Language'], ['content-type', 'Content-Type'], ['content-transfer-encoding', 'Content-Transfer-Encoding'], ['plural-forms', 'Plural-Forms'], ['mime-version', 'MIME-Version']]);
var formatCharset = exports.formatCharset = function formatCharset() {
  var charset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'iso-8859-1';
  var defaultCharset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'iso-8859-1';
  return charset.toString().toLowerCase().replace(/^utf[-_]?(\d+)$/, 'utf-$1').replace(/^win(?:dows)?[-_]?(\d+)$/, 'windows-$1').replace(/^latin[-_]?(\d+)$/, 'iso-8859-$1').replace(/^(us[-_]?)?ascii$/, 'ascii').replace(/^charset$/, defaultCharset).trim();
};
function compareMsgid(_ref, _ref2) {
  var left = _ref.msgid;
  var right = _ref2.msgid;
  if (left < right) return -1;
  if (left > right) return 1;
  return 0;
}
function foldLine(str) {
  var maxLen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 76;
  var lines = [];
  var len = str.length;
  var curLine = '';
  var pos = 0;
  var match;
  while (pos < len) {
    curLine = str.substr(pos, maxLen);
    while (curLine.substr(-1) === '\\' && pos + curLine.length < len) {
      curLine += str.charAt(pos + curLine.length);
    }
    if (match = /.*?\\n/.exec(curLine)) {
      curLine = match[0];
    } else if (pos + curLine.length < len) {
      if ((match = /.*\s+/.exec(curLine)) && /[^\s]/.test(match[0])) {
        curLine = match[0];
      } else if ((match = /.*[\x21-\x2f0-9\x5b-\x60\x7b-\x7e]+/.exec(curLine)) && /[^\x21-\x2f0-9\x5b-\x60\x7b-\x7e]/.test(match[0])) {
        curLine = match[0];
      }
    }
    lines.push(curLine);
    pos += curLine.length;
  }
  return lines;
}
function generateHeader() {
  var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var keys = Object.keys(header).filter(function (key) {
    return !!key;
  });
  if (!keys.length) return '';
  return keys.map(function (key) {
    return "".concat(key, ": ").concat((header[key] || '').trim());
  }).join('\n') + '\n';
}