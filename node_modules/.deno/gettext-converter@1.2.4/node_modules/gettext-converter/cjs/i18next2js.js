"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = i18next2js;
var _arrify = _interopRequireDefault(require("arrify"));
var _flatten = _interopRequireDefault(require("./flatten.js"));
var _options = require("./options.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var getGettextPluralPosition = function getGettextPluralPosition(ext, suffix) {
  if (ext) {
    for (var i = 0; i < ext.numbers.length; i += 1) {
      if (i === suffix) return i;
    }
  }
  return -1;
};
var getPluralArray = function getPluralArray(locale, translation, plurals) {
  var ext = plurals[locale.toLowerCase()] || plurals[locale.split(/_|-/)[0].toLowerCase()] || plurals.dev;
  var pArray = [];
  for (var i = 0, len = translation.plurals.length; i < len; i += 1) {
    var plural = translation.plurals[i];
    pArray.splice(getGettextPluralPosition(ext, plural.pluralNumber - 1), 0, plural.value);
  }
  pArray.splice(getGettextPluralPosition(ext, translation.pluralNumber - 1), 0, translation.value);
  return pArray;
};
var parseGettext = function parseGettext(locale, data) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var out = {
    charset: 'utf-8',
    headers: {
      'project-id-version': options.project || 'gettext-converter',
      'mime-version': '1.0',
      'content-type': 'text/plain; charset=utf-8',
      'content-transfer-encoding': '8bit'
    },
    translations: {}
  };
  var plurals = (0, _options.getPlurals)(options);
  var setLocaleAsLanguageHeader = (0, _options.getSetLocaleAsLanguageHeader)(options);
  var ext = plurals[locale.toLowerCase()] || plurals[locale.split(/_|-/)[0].toLowerCase()] || plurals.dev;
  var trans = {};
  out.headers['plural-forms'] = "nplurals=".concat(ext.numbers.length, "; plural=").concat(ext.plurals);
  if (!options.noDate) {
    out.headers['pot-creation-date'] = new Date().toISOString();
    out.headers['po-revision-date'] = new Date().toISOString();
    if (options.potCreationDate && typeof options.potCreationDate.toISOString === 'function') out.headers['pot-creation-date'] = options.potCreationDate.toISOString();
    if (options.poRevisionDate && typeof options.poRevisionDate.toISOString === 'function') out.headers['po-revision-date'] = options.poRevisionDate.toISOString();
  }
  if (options.language) out.headers.language = options.language;else if (setLocaleAsLanguageHeader) out.headers.language = locale;
  var delkeys = [];
  Object.keys(data).forEach(function (m) {
    var kv = data[m];
    if (kv.plurals) {
      var pArray = [];
      for (var i = 0, len = kv.plurals.length; i < len; i += 1) {
        var plural = kv.plurals[i];
        pArray.splice(getGettextPluralPosition(ext, plural.pluralNumber - 1), 0, plural.value);
      }
      if (ext.numbers.length !== 1) {
        pArray.splice(getGettextPluralPosition(ext, kv.pluralNumber - 1), 0, kv.value);
      }
      if (_typeof(trans[kv.context]) !== 'object') trans[kv.context] = {};
      if (options.keyasareference) {
        if (_typeof(trans[kv.context][kv.value]) === 'object') {
          trans[kv.context][kv.value].comments.reference.push(kv.key);
        } else {
          trans[kv.context][kv.value] = {
            msgctxt: kv.context,
            msgid: pArray[0],
            msgid_plural: pArray.slice(1, pArray.length),
            msgstr: (0, _arrify.default)(kv.translated_value),
            comments: {
              reference: [kv.key]
            }
          };
        }
        if (kv.key !== kv.value) {
          delkeys.push([kv.context, kv.key]);
        }
      } else {
        var msgid = kv.key;
        var msgid_plural = kv.key;
        if (kv.key.indexOf('|#|') > -1) {
          var p = kv.key.split('|#|');
          msgid = p[0];
          msgid_plural = p[1];
        }
        trans[kv.context][kv.key] = {
          msgctxt: kv.context,
          msgid: msgid,
          msgid_plural: msgid_plural,
          msgstr: pArray
        };
      }
    } else {
      if (_typeof(trans[kv.context]) !== 'object') trans[kv.context] = {};
      if (options.keyasareference) {
        if (_typeof(trans[kv.context][kv.value]) === 'object') {
          trans[kv.context][kv.value].comments.reference.push(kv.key);
        } else {
          trans[kv.context][kv.value] = {
            msgctxt: kv.context,
            msgid: kv.value,
            msgstr: (0, _arrify.default)(kv.translated_value),
            comments: {
              reference: [kv.key]
            }
          };
        }
        if (kv.key !== kv.value) {
          delkeys.push([kv.context, kv.key]);
        }
      } else {
        trans[kv.context][kv.key] = {
          msgctxt: kv.context,
          msgid: kv.key,
          msgstr: (0, _arrify.default)(kv.value)
        };
      }
    }
  });
  delkeys.forEach(function (a) {
    var c = a[0];
    var k = a[1];
    delete trans[c][k];
  });
  Object.keys(trans).forEach(function (ctxt) {
    Object.keys(trans[ctxt]).forEach(function (id) {
      if (trans[ctxt][id].comments && trans[ctxt][id].comments.reference) {
        trans[ctxt][id].comments.reference = trans[ctxt][id].comments.reference.join('\n');
      }
    });
  });
  out.translations = trans;
  return out;
};
function i18next2js(locale, body) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var flat = (0, _flatten.default)(typeof body === 'string' ? JSON.parse(body) : body, options, locale);
  if (options.base) {
    var bflat = (0, _flatten.default)(JSON.parse(options.base), options);
    Object.keys(bflat).forEach(function (key) {
      if (flat[key]) {
        if (flat[key].plurals) {
          bflat[key].translated_value = getPluralArray(locale, flat[key], (0, _options.getPlurals)(options));
        } else {
          bflat[key].translated_value = flat[key].value;
        }
      }
    });
    return parseGettext(locale, bflat, options);
  }
  return parseGettext(locale, flat, options);
}
module.exports = exports.default;