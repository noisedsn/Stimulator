"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _contentType = _interopRequireDefault(require("content-type"));
var _encoding = _interopRequireDefault(require("encoding"));
var _shared = require("./shared.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var handleCharset = function handleCharset(table) {
  var ct = _contentType.default.parse(table.headers['Content-Type'] || 'text/plain');
  var charset = (0, _shared.formatCharset)(table.charset || ct.parameters.charset || 'utf-8');
  if (ct.parameters.charset) {
    ct.parameters.charset = (0, _shared.formatCharset)(ct.parameters.charset);
  }
  table.charset = charset;
  table.headers['Content-Type'] = _contentType.default.format(ct);
};
var drawComments = function drawComments(comments) {
  var lines = [];
  var types = [{
    key: 'translator',
    prefix: '# '
  }, {
    key: 'reference',
    prefix: '#: '
  }, {
    key: 'extracted',
    prefix: '#. '
  }, {
    key: 'flag',
    prefix: '#, '
  }, {
    key: 'previous',
    prefix: '#| '
  }];
  types.forEach(function (type) {
    if (!comments[type.key]) return;
    comments[type.key].split(/\r?\n|\r/).forEach(function (line) {
      lines.push("".concat(type.prefix).concat(line));
    });
  });
  return lines.join('\n');
};
var addPOString = function addPOString() {
  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var options = arguments.length > 2 ? arguments[2] : undefined;
  key = key.toString();
  value = value.toString().replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\t/g, '\\t').replace(/\r/g, '\\r').replace(/\n/g, '\\n');
  var lines = [value];
  if (options.foldLength > 0) {
    lines = (0, _shared.foldLine)(value, options.foldLength);
  }
  if (lines.length < 2) {
    return "".concat(key, " \"").concat(lines.shift() || '', "\"");
  }
  return "".concat(key, " \"\"\n\"").concat(lines.join('"\n"'), "\"");
};
var drawBlock = function drawBlock(block) {
  var override = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var response = [];
  var msgctxt = override.msgctxt || block.msgctxt;
  var msgid = override.msgid || block.msgid;
  var msgidPlural = override.msgid_plural || block.msgid_plural;
  var msgstr = [].concat(override.msgstr || block.msgstr);
  var comments = override.comments || block.comments;
  if (comments && (comments = drawComments(comments))) {
    response.push(comments);
  }
  if (msgctxt) {
    response.push(addPOString('msgctxt', msgctxt, options));
  }
  response.push(addPOString('msgid', msgid || '', options));
  if (msgidPlural) {
    response.push(addPOString('msgid_plural', msgidPlural, options));
    msgstr.forEach(function (msgstr, i) {
      response.push(addPOString("msgstr[".concat(i, "]"), msgstr || '', options));
    });
    if (msgstr.length === 0) {
      response.push(addPOString('msgstr[0]', '', options));
    }
  } else {
    response.push(addPOString('msgstr', msgstr[0] || '', options));
  }
  return response.join('\n');
};
var compile = function compile(table, options) {
  var headerBlock = table.translations[''] && table.translations[''][''] || {};
  var response = [];
  Object.keys(table.translations).forEach(function (msgctxt) {
    if (_typeof(table.translations[msgctxt]) !== 'object') return;
    Object.keys(table.translations[msgctxt]).forEach(function (msgid) {
      if (_typeof(table.translations[msgctxt][msgid]) !== 'object') return;
      if (msgctxt === '' && msgid === '') return;
      response.push(table.translations[msgctxt][msgid]);
    });
  });
  if (options.sort !== false) {
    if (typeof options.sort === 'function') {
      response = response.sort(options.sort);
    } else {
      response = response.sort(_shared.compareMsgid);
    }
  }
  response = response.map(function (r) {
    return drawBlock(r, {}, options);
  });
  response.unshift(drawBlock(headerBlock, {
    msgstr: (0, _shared.generateHeader)(table.headers)
  }, options));
  if (table.charset === 'utf-8' || table.charset === 'ascii') {
    return response.join('\n\n');
  }
  return _encoding.default.convert(response.join('\n\n'), table.charset).toString();
};
function _default() {
  var table = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  table.translations = table.translations || {};
  options.project = options.project || 'gettext-converter';
  var _table$headers = table.headers,
    headers = _table$headers === void 0 ? {} : _table$headers;
  headers = Object.keys(headers).reduce(function (result, key) {
    var lowerKey = key.toLowerCase();
    if (_shared.HEADERS.has(lowerKey)) {
      result[_shared.HEADERS.get(lowerKey)] = headers[key];
    } else {
      result[key] = headers[key];
    }
    return result;
  }, {});
  if (!headers[_shared.HEADERS.get('project-id-version')]) headers[_shared.HEADERS.get('project-id-version')] = options.project;
  table.headers = headers;
  if (!('foldLength' in options)) options.foldLength = 76;
  if (!('sort' in options)) options.sort = false;
  handleCharset(table);
  return compile(table, options);
}
module.exports = exports.default;